2000, 2000, 2000, 0.024908, 642.355956

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(2000x2000) and matrix B(2000x2000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.24908308 s


2000x2000x2000	0.024908 s	642.355956 GFLOPS
Results saved to openblas_d.csv
2000, 2000, 2000, 0.025312, 632.113025

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(2000x2000) and matrix B(2000x2000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.25311929 s


2000x2000x2000	0.025312 s	632.113025 GFLOPS
Results saved to openblas_d.csv
2000, 2000, 2000, 0.025217, 634.504430

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(2000x2000) and matrix B(2000x2000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.25216530 s


2000x2000x2000	0.025217 s	634.504430 GFLOPS
Results saved to openblas_d.csv
2000, 2000, 2000, 0.025491, 627.671207

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(2000x2000) and matrix B(2000x2000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.25491053 s


2000x2000x2000	0.025491 s	627.671207 GFLOPS
Results saved to openblas_d.csv
2000, 2000, 2000, 0.025798, 620.197707

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(2000x2000) and matrix B(2000x2000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.25798225 s


2000x2000x2000	0.025798 s	620.197707 GFLOPS
Results saved to openblas_d.csv
2500, 2500, 2500, 0.049910, 626.124281

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(2500x2500) and matrix B(2500x2500)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.49910219 s


2500x2500x2500	0.049910 s	626.124281 GFLOPS
Results saved to openblas_d.csv
2500, 2500, 2500, 0.045688, 683.981024

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(2500x2500) and matrix B(2500x2500)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.45688402 s


2500x2500x2500	0.045688 s	683.981024 GFLOPS
Results saved to openblas_d.csv
2500, 2500, 2500, 0.048243, 647.762853

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(2500x2500) and matrix B(2500x2500)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.48242964 s


2500x2500x2500	0.048243 s	647.762853 GFLOPS
Results saved to openblas_d.csv
2500, 2500, 2500, 0.047626, 656.153003

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(2500x2500) and matrix B(2500x2500)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.47626087 s


2500x2500x2500	0.047626 s	656.153003 GFLOPS
Results saved to openblas_d.csv
2500, 2500, 2500, 0.049065, 636.913492

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(2500x2500) and matrix B(2500x2500)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.49064748 s


2500x2500x2500	0.049065 s	636.913492 GFLOPS
Results saved to openblas_d.csv
3000, 3000, 3000, 0.076585, 705.103117

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(3000x3000) and matrix B(3000x3000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.76584543 s


3000x3000x3000	0.076585 s	705.103117 GFLOPS
Results saved to openblas_d.csv
3000, 3000, 3000, 0.080692, 669.212964

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(3000x3000) and matrix B(3000x3000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.80691802 s


3000x3000x3000	0.080692 s	669.212964 GFLOPS
Results saved to openblas_d.csv
3000, 3000, 3000, 0.127535, 423.412098

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(3000x3000) and matrix B(3000x3000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.127535326 s


3000x3000x3000	0.127535 s	423.412098 GFLOPS
Results saved to openblas_d.csv
3000, 3000, 3000, 0.079359, 680.450862

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(3000x3000) and matrix B(3000x3000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.79359147 s


3000x3000x3000	0.079359 s	680.450862 GFLOPS
Results saved to openblas_d.csv
3000, 3000, 3000, 0.079849, 676.275981

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(3000x3000) and matrix B(3000x3000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.79849058 s


3000x3000x3000	0.079849 s	676.275981 GFLOPS
Results saved to openblas_d.csv
3500, 3500, 3500, 0.126261, 679.151351

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(3500x3500) and matrix B(3500x3500)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.126260516 s


3500x3500x3500	0.126261 s	679.151351 GFLOPS
Results saved to openblas_d.csv
3500, 3500, 3500, 0.124360, 689.529930

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(3500x3500) and matrix B(3500x3500)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.124360084 s


3500x3500x3500	0.124360 s	689.529930 GFLOPS
Results saved to openblas_d.csv
3500, 3500, 3500, 0.121560, 705.411560

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(3500x3500) and matrix B(3500x3500)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.121560242 s


3500x3500x3500	0.121560 s	705.411560 GFLOPS
Results saved to openblas_d.csv
3500, 3500, 3500, 0.124106, 690.940713

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(3500x3500) and matrix B(3500x3500)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.124106162 s


3500x3500x3500	0.124106 s	690.940713 GFLOPS
Results saved to openblas_d.csv
3500, 3500, 3500, 0.120992, 708.726535

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(3500x3500) and matrix B(3500x3500)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.120991660 s


3500x3500x3500	0.120992 s	708.726535 GFLOPS
Results saved to openblas_d.csv
4000, 4000, 4000, 0.177881, 719.583532

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(4000x4000) and matrix B(4000x4000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.177880669 s


4000x4000x4000	0.177881 s	719.583532 GFLOPS
Results saved to openblas_d.csv
4000, 4000, 4000, 0.171680, 745.574779

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(4000x4000) and matrix B(4000x4000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.171679627 s


4000x4000x4000	0.171680 s	745.574779 GFLOPS
Results saved to openblas_d.csv
4000, 4000, 4000, 0.171387, 746.849952

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(4000x4000) and matrix B(4000x4000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.171386501 s


4000x4000x4000	0.171387 s	746.849952 GFLOPS
Results saved to openblas_d.csv
4000, 4000, 4000, 0.177267, 722.074879

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(4000x4000) and matrix B(4000x4000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.177266934 s


4000x4000x4000	0.177267 s	722.074879 GFLOPS
Results saved to openblas_d.csv
4000, 4000, 4000, 0.178075, 718.797008

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(4000x4000) and matrix B(4000x4000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.178075310 s


4000x4000x4000	0.178075 s	718.797008 GFLOPS
Results saved to openblas_d.csv
4500, 4500, 4500, 0.250877, 726.450811

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(4500x4500) and matrix B(4500x4500)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.250877275 s


4500x4500x4500	0.250877 s	726.450811 GFLOPS
Results saved to openblas_d.csv
4500, 4500, 4500, 0.244621, 745.028742

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(4500x4500) and matrix B(4500x4500)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.244621435 s


4500x4500x4500	0.244621 s	745.028742 GFLOPS
Results saved to openblas_d.csv
4500, 4500, 4500, 0.249332, 730.952825

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(4500x4500) and matrix B(4500x4500)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.249332096 s


4500x4500x4500	0.249332 s	730.952825 GFLOPS
Results saved to openblas_d.csv
4500, 4500, 4500, 0.247496, 736.375332

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(4500x4500) and matrix B(4500x4500)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.247496069 s


4500x4500x4500	0.247496 s	736.375332 GFLOPS
Results saved to openblas_d.csv
4500, 4500, 4500, 0.246731, 738.657405

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(4500x4500) and matrix B(4500x4500)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.246731433 s


4500x4500x4500	0.246731 s	738.657405 GFLOPS
Results saved to openblas_d.csv
5000, 5000, 5000, 0.351284, 711.674544

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.351284168 s


5000x5000x5000	0.351284 s	711.674544 GFLOPS
Results saved to openblas_d.csv
5000, 5000, 5000, 0.337347, 741.076155

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.337347246 s


5000x5000x5000	0.337347 s	741.076155 GFLOPS
Results saved to openblas_d.csv
5000, 5000, 5000, 0.338085, 739.458856

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.338085071 s


5000x5000x5000	0.338085 s	739.458856 GFLOPS
Results saved to openblas_d.csv
5000, 5000, 5000, 0.334450, 747.494928

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.334450430 s


5000x5000x5000	0.334450 s	747.494928 GFLOPS
Results saved to openblas_d.csv
5000, 5000, 5000, 0.342802, 729.284224

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.342801876 s


5000x5000x5000	0.342802 s	729.284224 GFLOPS
Results saved to openblas_d.csv
5500, 5500, 5500, 0.454710, 731.785486

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5500x5500) and matrix B(5500x5500)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.454709756 s


5500x5500x5500	0.454710 s	731.785486 GFLOPS
Results saved to openblas_d.csv
5500, 5500, 5500, 0.457214, 727.776699

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5500x5500) and matrix B(5500x5500)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.457214418 s


5500x5500x5500	0.457214 s	727.776699 GFLOPS
Results saved to openblas_d.csv
5500, 5500, 5500, 0.456092, 729.567073

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5500x5500) and matrix B(5500x5500)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.456092404 s


5500x5500x5500	0.456092 s	729.567073 GFLOPS
Results saved to openblas_d.csv
5500, 5500, 5500, 0.449887, 739.630909

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5500x5500) and matrix B(5500x5500)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.449886553 s


5500x5500x5500	0.449887 s	739.630909 GFLOPS
Results saved to openblas_d.csv
5500, 5500, 5500, 0.446162, 745.805044

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5500x5500) and matrix B(5500x5500)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.446162174 s


5500x5500x5500	0.446162 s	745.805044 GFLOPS
Results saved to openblas_d.csv
6000, 6000, 6000, 0.565143, 764.408935

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(6000x6000) and matrix B(6000x6000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.565142531 s


6000x6000x6000	0.565143 s	764.408935 GFLOPS
Results saved to openblas_d.csv
6000, 6000, 6000, 0.569275, 758.859900

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(6000x6000) and matrix B(6000x6000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.569275040 s


6000x6000x6000	0.569275 s	758.859900 GFLOPS
Results saved to openblas_d.csv
6000, 6000, 6000, 0.562853, 767.518712

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(6000x6000) and matrix B(6000x6000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.562852727 s


6000x6000x6000	0.562853 s	767.518712 GFLOPS
Results saved to openblas_d.csv
6000, 6000, 6000, 0.564490, 765.292908

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(6000x6000) and matrix B(6000x6000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.564489747 s


6000x6000x6000	0.564490 s	765.292908 GFLOPS
Results saved to openblas_d.csv
6000, 6000, 6000, 0.575059, 751.227118

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(6000x6000) and matrix B(6000x6000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.575059113 s


6000x6000x6000	0.575059 s	751.227118 GFLOPS
Results saved to openblas_d.csv
6500, 6500, 6500, 0.717406, 765.605382

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(6500x6500) and matrix B(6500x6500)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.717406138 s


6500x6500x6500	0.717406 s	765.605382 GFLOPS
Results saved to openblas_d.csv
6500, 6500, 6500, 0.736197, 746.063944

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(6500x6500) and matrix B(6500x6500)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.736196950 s


6500x6500x6500	0.736197 s	746.063944 GFLOPS
Results saved to openblas_d.csv
6500, 6500, 6500, 0.735016, 747.263071

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(6500x6500) and matrix B(6500x6500)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.735015581 s


6500x6500x6500	0.735016 s	747.263071 GFLOPS
Results saved to openblas_d.csv
6500, 6500, 6500, 0.721863, 760.878800

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(6500x6500) and matrix B(6500x6500)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.721862667 s


6500x6500x6500	0.721863 s	760.878800 GFLOPS
Results saved to openblas_d.csv
6500, 6500, 6500, 0.707839, 775.953576

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(6500x6500) and matrix B(6500x6500)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.707838738 s


6500x6500x6500	0.707839 s	775.953576 GFLOPS
Results saved to openblas_d.csv
7000, 7000, 7000, 0.907002, 756.338136

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(7000x7000) and matrix B(7000x7000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.907001733 s


7000x7000x7000	0.907002 s	756.338136 GFLOPS
Results saved to openblas_d.csv
7000, 7000, 7000, 0.913624, 750.855754

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(7000x7000) and matrix B(7000x7000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.913624216 s


7000x7000x7000	0.913624 s	750.855754 GFLOPS
Results saved to openblas_d.csv
7000, 7000, 7000, 0.959539, 714.926807

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(7000x7000) and matrix B(7000x7000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.959538786 s


7000x7000x7000	0.959539 s	714.926807 GFLOPS
Results saved to openblas_d.csv
7000, 7000, 7000, 0.887067, 773.334686

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(7000x7000) and matrix B(7000x7000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.887067414 s


7000x7000x7000	0.887067 s	773.334686 GFLOPS
Results saved to openblas_d.csv
7000, 7000, 7000, 0.904682, 758.277213

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(7000x7000) and matrix B(7000x7000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.904682336 s


7000x7000x7000	0.904682 s	758.277213 GFLOPS
Results saved to openblas_d.csv
7500, 7500, 7500, 1.111336, 759.221543

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(7500x7500) and matrix B(7500x7500)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.111335694 s


7500x7500x7500	1.111336 s	759.221543 GFLOPS
Results saved to openblas_d.csv
7500, 7500, 7500, 1.131883, 745.438953

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(7500x7500) and matrix B(7500x7500)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.131883431 s


7500x7500x7500	1.131883 s	745.438953 GFLOPS
Results saved to openblas_d.csv
7500, 7500, 7500, 1.118650, 754.257499

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(7500x7500) and matrix B(7500x7500)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.118649800 s


7500x7500x7500	1.118650 s	754.257499 GFLOPS
Results saved to openblas_d.csv
7500, 7500, 7500, 1.134820, 743.510267

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(7500x7500) and matrix B(7500x7500)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.134819568 s


7500x7500x7500	1.134820 s	743.510267 GFLOPS
Results saved to openblas_d.csv
7500, 7500, 7500, 1.105868, 762.975543

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(7500x7500) and matrix B(7500x7500)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.105867688 s


7500x7500x7500	1.105868 s	762.975543 GFLOPS
Results saved to openblas_d.csv
8000, 8000, 8000, 1.336834, 765.989016

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(8000x8000) and matrix B(8000x8000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.336833790 s


8000x8000x8000	1.336834 s	765.989016 GFLOPS
Results saved to openblas_d.csv
8000, 8000, 8000, 1.326842, 771.757529

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(8000x8000) and matrix B(8000x8000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.326841607 s


8000x8000x8000	1.326842 s	771.757529 GFLOPS
Results saved to openblas_d.csv
8000, 8000, 8000, 1.353421, 756.601175

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(8000x8000) and matrix B(8000x8000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.353421107 s


8000x8000x8000	1.353421 s	756.601175 GFLOPS
Results saved to openblas_d.csv
8000, 8000, 8000, 1.401596, 730.595852

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(8000x8000) and matrix B(8000x8000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.401595694 s


8000x8000x8000	1.401596 s	730.595852 GFLOPS
Results saved to openblas_d.csv
8000, 8000, 8000, 1.376278, 744.035982

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(8000x8000) and matrix B(8000x8000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.376277526 s


8000x8000x8000	1.376278 s	744.035982 GFLOPS
Results saved to openblas_d.csv
8500, 8500, 8500, 1.609930, 762.921191

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(8500x8500) and matrix B(8500x8500)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.609930377 s


8500x8500x8500	1.609930 s	762.921191 GFLOPS
Results saved to openblas_d.csv
8500, 8500, 8500, 1.609551, 763.101147

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(8500x8500) and matrix B(8500x8500)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.609550719 s


8500x8500x8500	1.609551 s	763.101147 GFLOPS
Results saved to openblas_d.csv
8500, 8500, 8500, 1.695423, 724.450666

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(8500x8500) and matrix B(8500x8500)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.695422556 s


8500x8500x8500	1.695423 s	724.450666 GFLOPS
Results saved to openblas_d.csv
8500, 8500, 8500, 1.586932, 773.977782

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(8500x8500) and matrix B(8500x8500)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.586931858 s


8500x8500x8500	1.586932 s	773.977782 GFLOPS
Results saved to openblas_d.csv
8500, 8500, 8500, 1.689385, 727.039657

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(8500x8500) and matrix B(8500x8500)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.689385151 s


8500x8500x8500	1.689385 s	727.039657 GFLOPS
Results saved to openblas_d.csv
9000, 9000, 9000, 1.947638, 748.598938

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(9000x9000) and matrix B(9000x9000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.947638350 s


9000x9000x9000	1.947638 s	748.598938 GFLOPS
Results saved to openblas_d.csv
9000, 9000, 9000, 1.923500, 757.993207

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(9000x9000) and matrix B(9000x9000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.923500088 s


9000x9000x9000	1.923500 s	757.993207 GFLOPS
Results saved to openblas_d.csv
9000, 9000, 9000, 1.904674, 765.485488

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(9000x9000) and matrix B(9000x9000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.904673601 s


9000x9000x9000	1.904674 s	765.485488 GFLOPS
Results saved to openblas_d.csv
9000, 9000, 9000, 1.881781, 774.797927

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(9000x9000) and matrix B(9000x9000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.881780977 s


9000x9000x9000	1.881781 s	774.797927 GFLOPS
Results saved to openblas_d.csv
9000, 9000, 9000, 1.885476, 773.279438

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(9000x9000) and matrix B(9000x9000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.885476230 s


9000x9000x9000	1.885476 s	773.279438 GFLOPS
Results saved to openblas_d.csv
9500, 9500, 9500, 2.233636, 767.694330

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(9500x9500) and matrix B(9500x9500)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.233636402 s


9500x9500x9500	2.233636 s	767.694330 GFLOPS
Results saved to openblas_d.csv
9500, 9500, 9500, 2.179667, 786.702672

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(9500x9500) and matrix B(9500x9500)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.179667188 s


9500x9500x9500	2.179667 s	786.702672 GFLOPS
Results saved to openblas_d.csv
9500, 9500, 9500, 2.270973, 755.072970

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(9500x9500) and matrix B(9500x9500)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.270972567 s


9500x9500x9500	2.270973 s	755.072970 GFLOPS
Results saved to openblas_d.csv
9500, 9500, 9500, 2.239381, 765.725072

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(9500x9500) and matrix B(9500x9500)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.239380767 s


9500x9500x9500	2.239381 s	765.725072 GFLOPS
Results saved to openblas_d.csv
9500, 9500, 9500, 2.328185, 736.517809

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(9500x9500) and matrix B(9500x9500)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.328185388 s


9500x9500x9500	2.328185 s	736.517809 GFLOPS
Results saved to openblas_d.csv
10000, 10000, 10000, 2.595398, 770.594780

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.595397804 s


10000x10000x10000	2.595398 s	770.594780 GFLOPS
Results saved to openblas_d.csv
10000, 10000, 10000, 2.587972, 772.805909

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.587971931 s


10000x10000x10000	2.587972 s	772.805909 GFLOPS
Results saved to openblas_d.csv
10000, 10000, 10000, 2.606673, 767.261624

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.606672791 s


10000x10000x10000	2.606673 s	767.261624 GFLOPS
Results saved to openblas_d.csv
10000, 10000, 10000, 2.609783, 766.347129

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.609783378 s


10000x10000x10000	2.609783 s	766.347129 GFLOPS
Results saved to openblas_d.csv
10000, 10000, 10000, 2.603313, 768.251897

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.603312803 s


10000x10000x10000	2.603313 s	768.251897 GFLOPS
Results saved to openblas_d.csv
10500, 10500, 10500, 3.003185, 770.931577

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10500x10500) and matrix B(10500x10500)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.3184806 s


10500x10500x10500	3.003185 s	770.931577 GFLOPS
Results saved to openblas_d.csv
10500, 10500, 10500, 3.165664, 731.363215

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10500x10500) and matrix B(10500x10500)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.165663725 s


10500x10500x10500	3.165664 s	731.363215 GFLOPS
Results saved to openblas_d.csv
10500, 10500, 10500, 3.021781, 766.187129

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10500x10500) and matrix B(10500x10500)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.21781381 s


10500x10500x10500	3.021781 s	766.187129 GFLOPS
Results saved to openblas_d.csv
10500, 10500, 10500, 3.155935, 733.617739

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10500x10500) and matrix B(10500x10500)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.155935138 s


10500x10500x10500	3.155935 s	733.617739 GFLOPS
Results saved to openblas_d.csv
10500, 10500, 10500, 3.015324, 767.827843

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10500x10500) and matrix B(10500x10500)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.15324360 s


10500x10500x10500	3.015324 s	767.827843 GFLOPS
Results saved to openblas_d.csv
11000, 11000, 11000, 3.555427, 748.714499

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(11000x11000) and matrix B(11000x11000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.555427342 s


11000x11000x11000	3.555427 s	748.714499 GFLOPS
Results saved to openblas_d.csv
11000, 11000, 11000, 3.732239, 713.244849

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(11000x11000) and matrix B(11000x11000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.732238659 s


11000x11000x11000	3.732239 s	713.244849 GFLOPS
Results saved to openblas_d.csv
11000, 11000, 11000, 3.662360, 726.853814

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(11000x11000) and matrix B(11000x11000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.662359539 s


11000x11000x11000	3.662360 s	726.853814 GFLOPS
Results saved to openblas_d.csv
11000, 11000, 11000, 3.513227, 757.707855

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(11000x11000) and matrix B(11000x11000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.513227404 s


11000x11000x11000	3.513227 s	757.707855 GFLOPS
Results saved to openblas_d.csv
11000, 11000, 11000, 3.660613, 727.200664

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(11000x11000) and matrix B(11000x11000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.660612718 s


11000x11000x11000	3.660613 s	727.200664 GFLOPS
Results saved to openblas_d.csv
11500, 11500, 11500, 4.042672, 752.410791

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(11500x11500) and matrix B(11500x11500)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 4.42671950 s


11500x11500x11500	4.042672 s	752.410791 GFLOPS
Results saved to openblas_d.csv
11500, 11500, 11500, 3.965179, 767.115375

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(11500x11500) and matrix B(11500x11500)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.965179292 s


11500x11500x11500	3.965179 s	767.115375 GFLOPS
Results saved to openblas_d.csv
11500, 11500, 11500, 4.079830, 745.557955

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(11500x11500) and matrix B(11500x11500)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 4.79830389 s


11500x11500x11500	4.079830 s	745.557955 GFLOPS
Results saved to openblas_d.csv
11500, 11500, 11500, 4.083552, 744.878419

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(11500x11500) and matrix B(11500x11500)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 4.83552328 s


11500x11500x11500	4.083552 s	744.878419 GFLOPS
Results saved to openblas_d.csv
11500, 11500, 11500, 3.979478, 764.359048

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(11500x11500) and matrix B(11500x11500)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.979477981 s


11500x11500x11500	3.979478 s	764.359048 GFLOPS
Results saved to openblas_d.csv
12000, 12000, 12000, 4.478645, 771.661880

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(12000x12000) and matrix B(12000x12000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 4.478645493 s


12000x12000x12000	4.478645 s	771.661880 GFLOPS
Results saved to openblas_d.csv
12000, 12000, 12000, 4.505055, 767.138303

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(12000x12000) and matrix B(12000x12000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 4.505054676 s


12000x12000x12000	4.505055 s	767.138303 GFLOPS
Results saved to openblas_d.csv
12000, 12000, 12000, 4.603685, 750.703042

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(12000x12000) and matrix B(12000x12000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 4.603684555 s


12000x12000x12000	4.603685 s	750.703042 GFLOPS
Results saved to openblas_d.csv
12000, 12000, 12000, 4.571932, 755.916751

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(12000x12000) and matrix B(12000x12000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 4.571932020 s


12000x12000x12000	4.571932 s	755.916751 GFLOPS
Results saved to openblas_d.csv
12000, 12000, 12000, 4.704733, 734.579435

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(12000x12000) and matrix B(12000x12000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 4.704732853 s


12000x12000x12000	4.704733 s	734.579435 GFLOPS
Results saved to openblas_d.csv
12500, 12500, 12500, 5.156596, 757.524936

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(12500x12500) and matrix B(12500x12500)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 5.156595925 s


12500x12500x12500	5.156596 s	757.524936 GFLOPS
Results saved to openblas_d.csv
12500, 12500, 12500, 5.099811, 765.959756

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(12500x12500) and matrix B(12500x12500)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 5.99811016 s


12500x12500x12500	5.099811 s	765.959756 GFLOPS
Results saved to openblas_d.csv
12500, 12500, 12500, 4.997627, 781.620938

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(12500x12500) and matrix B(12500x12500)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 4.997627124 s


12500x12500x12500	4.997627 s	781.620938 GFLOPS
Results saved to openblas_d.csv
12500, 12500, 12500, 5.095655, 766.584523

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(12500x12500) and matrix B(12500x12500)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 5.95654663 s


12500x12500x12500	5.095655 s	766.584523 GFLOPS
Results saved to openblas_d.csv
12500, 12500, 12500, 5.248042, 744.325230

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(12500x12500) and matrix B(12500x12500)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 5.248041906 s


12500x12500x12500	5.248042 s	744.325230 GFLOPS
Results saved to openblas_d.csv
13000, 13000, 13000, 5.789882, 758.910114

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(13000x13000) and matrix B(13000x13000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 5.789881989 s


13000x13000x13000	5.789882 s	758.910114 GFLOPS
Results saved to openblas_d.csv
13000, 13000, 13000, 5.708544, 769.723369

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(13000x13000) and matrix B(13000x13000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 5.708544361 s


13000x13000x13000	5.708544 s	769.723369 GFLOPS
Results saved to openblas_d.csv
13000, 13000, 13000, 5.677758, 773.897015

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(13000x13000) and matrix B(13000x13000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 5.677758042 s


13000x13000x13000	5.677758 s	773.897015 GFLOPS
Results saved to openblas_d.csv
13000, 13000, 13000, 5.910811, 743.383562

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(13000x13000) and matrix B(13000x13000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 5.910811358 s


13000x13000x13000	5.910811 s	743.383562 GFLOPS
Results saved to openblas_d.csv
13000, 13000, 13000, 5.706935, 769.940430

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(13000x13000) and matrix B(13000x13000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 5.706935014 s


13000x13000x13000	5.706935 s	769.940430 GFLOPS
Results saved to openblas_d.csv
13500, 13500, 13500, 6.289947, 782.319756

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(13500x13500) and matrix B(13500x13500)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 6.289947254 s


13500x13500x13500	6.289947 s	782.319756 GFLOPS
Results saved to openblas_d.csv
13500, 13500, 13500, 6.259024, 786.184866

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(13500x13500) and matrix B(13500x13500)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 6.259024072 s


13500x13500x13500	6.259024 s	786.184866 GFLOPS
Results saved to openblas_d.csv
13500, 13500, 13500, 6.371395, 772.319118

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(13500x13500) and matrix B(13500x13500)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 6.371394780 s


13500x13500x13500	6.371395 s	772.319118 GFLOPS
Results saved to openblas_d.csv
13500, 13500, 13500, 6.458165, 761.942451

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(13500x13500) and matrix B(13500x13500)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 6.458164912 s


13500x13500x13500	6.458165 s	761.942451 GFLOPS
Results saved to openblas_d.csv
13500, 13500, 13500, 6.353348, 774.512895

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(13500x13500) and matrix B(13500x13500)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 6.353348059 s


13500x13500x13500	6.353348 s	774.512895 GFLOPS
Results saved to openblas_d.csv
14000, 14000, 14000, 7.269591, 754.925509

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(14000x14000) and matrix B(14000x14000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 7.269591415 s


14000x14000x14000	7.269591 s	754.925509 GFLOPS
Results saved to openblas_d.csv
14000, 14000, 14000, 6.992028, 784.893828

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(14000x14000) and matrix B(14000x14000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 6.992028485 s


14000x14000x14000	6.992028 s	784.893828 GFLOPS
Results saved to openblas_d.csv
14000, 14000, 14000, 7.161620, 766.307066

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(14000x14000) and matrix B(14000x14000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 7.161619990 s


14000x14000x14000	7.161620 s	766.307066 GFLOPS
Results saved to openblas_d.csv
14000, 14000, 14000, 7.221163, 759.988385

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(14000x14000) and matrix B(14000x14000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 7.221162993 s


14000x14000x14000	7.221163 s	759.988385 GFLOPS
Results saved to openblas_d.csv
14000, 14000, 14000, 7.172242, 765.172164

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(14000x14000) and matrix B(14000x14000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 7.172242092 s


14000x14000x14000	7.172242 s	765.172164 GFLOPS
Results saved to openblas_d.csv
14500, 14500, 14500, 8.096858, 753.039028

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(14500x14500) and matrix B(14500x14500)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 8.96857892 s


14500x14500x14500	8.096858 s	753.039028 GFLOPS
Results saved to openblas_d.csv
14500, 14500, 14500, 7.868672, 774.876642

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(14500x14500) and matrix B(14500x14500)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 7.868671827 s


14500x14500x14500	7.868672 s	774.876642 GFLOPS
Results saved to openblas_d.csv
14500, 14500, 14500, 7.782277, 783.478889

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(14500x14500) and matrix B(14500x14500)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 7.782277330 s


14500x14500x14500	7.782277 s	783.478889 GFLOPS
Results saved to openblas_d.csv
14500, 14500, 14500, 7.868047, 774.938191

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(14500x14500) and matrix B(14500x14500)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 7.868046859 s


14500x14500x14500	7.868047 s	774.938191 GFLOPS
Results saved to openblas_d.csv
14500, 14500, 14500, 8.030831, 759.230315

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(14500x14500) and matrix B(14500x14500)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 8.30830535 s


14500x14500x14500	8.030831 s	759.230315 GFLOPS
Results saved to openblas_d.csv
15000, 15000, 15000, 8.667758, 778.748058

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(15000x15000) and matrix B(15000x15000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 8.667758377 s


15000x15000x15000	8.667758 s	778.748058 GFLOPS
Results saved to openblas_d.csv
15000, 15000, 15000, 8.831673, 764.294577

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(15000x15000) and matrix B(15000x15000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 8.831673283 s


15000x15000x15000	8.831673 s	764.294577 GFLOPS
Results saved to openblas_d.csv
15000, 15000, 15000, 8.883866, 759.804316

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(15000x15000) and matrix B(15000x15000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 8.883866359 s


15000x15000x15000	8.883866 s	759.804316 GFLOPS
Results saved to openblas_d.csv
15000, 15000, 15000, 8.697359, 776.097683

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(15000x15000) and matrix B(15000x15000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 8.697358780 s


15000x15000x15000	8.697359 s	776.097683 GFLOPS
Results saved to openblas_d.csv
15000, 15000, 15000, 8.681891, 777.480398

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(15000x15000) and matrix B(15000x15000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 8.681890914 s


15000x15000x15000	8.681891 s	777.480398 GFLOPS
Results saved to openblas_d.csv
15500, 15500, 15500, 9.424071, 790.290121

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(15500x15500) and matrix B(15500x15500)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 9.424070738 s


15500x15500x15500	9.424071 s	790.290121 GFLOPS
Results saved to openblas_d.csv
15500, 15500, 15500, 9.752066, 763.709969

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(15500x15500) and matrix B(15500x15500)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 9.752065965 s


15500x15500x15500	9.752066 s	763.709969 GFLOPS
Results saved to openblas_d.csv
15500, 15500, 15500, 9.385455, 793.541695

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(15500x15500) and matrix B(15500x15500)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 9.385455165 s


15500x15500x15500	9.385455 s	793.541695 GFLOPS
Results saved to openblas_d.csv
15500, 15500, 15500, 9.996427, 745.041188

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(15500x15500) and matrix B(15500x15500)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 9.996427206 s


15500x15500x15500	9.996427 s	745.041188 GFLOPS
Results saved to openblas_d.csv
15500, 15500, 15500, 9.419237, 790.695642

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(15500x15500) and matrix B(15500x15500)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 9.419237445 s


15500x15500x15500	9.419237 s	790.695642 GFLOPS
Results saved to openblas_d.csv
16000, 16000, 16000, 10.819976, 757.118101

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(16000x16000) and matrix B(16000x16000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 10.819976419 s


16000x16000x16000	10.819976 s	757.118101 GFLOPS
Results saved to openblas_d.csv
16000, 16000, 16000, 10.921938, 750.050056

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(16000x16000) and matrix B(16000x16000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 10.921937723 s


16000x16000x16000	10.921938 s	750.050056 GFLOPS
Results saved to openblas_d.csv
16000, 16000, 16000, 10.381689, 789.081588

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(16000x16000) and matrix B(16000x16000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 10.381689454 s


16000x16000x16000	10.381689 s	789.081588 GFLOPS
Results saved to openblas_d.csv
16000, 16000, 16000, 10.639212, 769.981804

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(16000x16000) and matrix B(16000x16000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 10.639212461 s


16000x16000x16000	10.639212 s	769.981804 GFLOPS
Results saved to openblas_d.csv
16000, 16000, 16000, 10.476138, 781.967577

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(16000x16000) and matrix B(16000x16000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 10.476137679 s


16000x16000x16000	10.476138 s	781.967577 GFLOPS
Results saved to openblas_d.csv
16500, 16500, 16500, 11.492271, 781.764568

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(16500x16500) and matrix B(16500x16500)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 11.492270651 s


16500x16500x16500	11.492271 s	781.764568 GFLOPS
Results saved to openblas_d.csv
16500, 16500, 16500, 11.422979, 786.506776

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(16500x16500) and matrix B(16500x16500)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 11.422978509 s


16500x16500x16500	11.422979 s	786.506776 GFLOPS
Results saved to openblas_d.csv
16500, 16500, 16500, 11.431195, 785.941465

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(16500x16500) and matrix B(16500x16500)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 11.431194812 s


16500x16500x16500	11.431195 s	785.941465 GFLOPS
Results saved to openblas_d.csv
16500, 16500, 16500, 11.672635, 769.684821

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(16500x16500) and matrix B(16500x16500)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 11.672635027 s


16500x16500x16500	11.672635 s	769.684821 GFLOPS
Results saved to openblas_d.csv
16500, 16500, 16500, 11.479232, 782.652515

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(16500x16500) and matrix B(16500x16500)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 11.479232259 s


16500x16500x16500	11.479232 s	782.652515 GFLOPS
Results saved to openblas_d.csv
17000, 17000, 17000, 12.487017, 786.897302

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(17000x17000) and matrix B(17000x17000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 12.487017023 s


17000x17000x17000	12.487017 s	786.897302 GFLOPS
Results saved to openblas_d.csv
17000, 17000, 17000, 12.610307, 779.203891

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(17000x17000) and matrix B(17000x17000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 12.610306644 s


17000x17000x17000	12.610307 s	779.203891 GFLOPS
Results saved to openblas_d.csv
17000, 17000, 17000, 12.595332, 780.130270

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(17000x17000) and matrix B(17000x17000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 12.595332315 s


17000x17000x17000	12.595332 s	780.130270 GFLOPS
Results saved to openblas_d.csv
17000, 17000, 17000, 13.223989, 743.043578

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(17000x17000) and matrix B(17000x17000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 13.223988859 s


17000x17000x17000	13.223989 s	743.043578 GFLOPS
Results saved to openblas_d.csv
17000, 17000, 17000, 12.374857, 794.029384

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(17000x17000) and matrix B(17000x17000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 12.374856892 s


17000x17000x17000	12.374857 s	794.029384 GFLOPS
Results saved to openblas_d.csv
17500, 17500, 17500, 14.240507, 752.694391

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(17500x17500) and matrix B(17500x17500)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 14.240507338 s


17500x17500x17500	14.240507 s	752.694391 GFLOPS
Results saved to openblas_d.csv
17500, 17500, 17500, 13.554026, 790.816702

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(17500x17500) and matrix B(17500x17500)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 13.554025830 s


17500x17500x17500	13.554026 s	790.816702 GFLOPS
Results saved to openblas_d.csv
17500, 17500, 17500, 13.597780, 788.272052

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(17500x17500) and matrix B(17500x17500)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 13.597780064 s


17500x17500x17500	13.597780 s	788.272052 GFLOPS
Results saved to openblas_d.csv
17500, 17500, 17500, 13.505675, 793.647841

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(17500x17500) and matrix B(17500x17500)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 13.505675247 s


17500x17500x17500	13.505675 s	793.647841 GFLOPS
Results saved to openblas_d.csv
17500, 17500, 17500, 13.961452, 767.738897

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(17500x17500) and matrix B(17500x17500)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 13.961452311 s


17500x17500x17500	13.961452 s	767.738897 GFLOPS
Results saved to openblas_d.csv
18000, 18000, 18000, 15.282761, 763.212879

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(18000x18000) and matrix B(18000x18000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 15.282760970 s


18000x18000x18000	15.282761 s	763.212879 GFLOPS
Results saved to openblas_d.csv
18000, 18000, 18000, 14.745722, 791.009090

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(18000x18000) and matrix B(18000x18000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 14.745721824 s


18000x18000x18000	14.745722 s	791.009090 GFLOPS
Results saved to openblas_d.csv
18000, 18000, 18000, 14.741125, 791.255774

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(18000x18000) and matrix B(18000x18000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 14.741124658 s


18000x18000x18000	14.741125 s	791.255774 GFLOPS
Results saved to openblas_d.csv
18000, 18000, 18000, 15.762000, 740.007596

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(18000x18000) and matrix B(18000x18000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 15.762000372 s


18000x18000x18000	15.762000 s	740.007596 GFLOPS
Results saved to openblas_d.csv
18000, 18000, 18000, 14.758187, 790.340975

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(18000x18000) and matrix B(18000x18000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 14.758187123 s


18000x18000x18000	14.758187 s	790.340975 GFLOPS
Results saved to openblas_d.csv
18500, 18500, 18500, 16.212337, 781.087249

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(18500x18500) and matrix B(18500x18500)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 16.212337366 s


18500x18500x18500	16.212337 s	781.087249 GFLOPS
Results saved to openblas_d.csv
18500, 18500, 18500, 16.112700, 785.917298

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(18500x18500) and matrix B(18500x18500)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 16.112700457 s


18500x18500x18500	16.112700 s	785.917298 GFLOPS
Results saved to openblas_d.csv
18500, 18500, 18500, 16.101825, 786.448121

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(18500x18500) and matrix B(18500x18500)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 16.101824976 s


18500x18500x18500	16.101825 s	786.448121 GFLOPS
Results saved to openblas_d.csv
18500, 18500, 18500, 16.074253, 787.797116

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(18500x18500) and matrix B(18500x18500)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 16.74252793 s


18500x18500x18500	16.074253 s	787.797116 GFLOPS
Results saved to openblas_d.csv
18500, 18500, 18500, 16.099669, 786.553443

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(18500x18500) and matrix B(18500x18500)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 16.99668902 s


18500x18500x18500	16.099669 s	786.553443 GFLOPS
Results saved to openblas_d.csv
19000, 19000, 19000, 17.370301, 789.738739

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(19000x19000) and matrix B(19000x19000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 17.370301494 s


19000x19000x19000	17.370301 s	789.738739 GFLOPS
Results saved to openblas_d.csv
19000, 19000, 19000, 17.272023, 794.232361

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(19000x19000) and matrix B(19000x19000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 17.272023492 s


19000x19000x19000	17.272023 s	794.232361 GFLOPS
Results saved to openblas_d.csv
19000, 19000, 19000, 17.281829, 793.781733

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(19000x19000) and matrix B(19000x19000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 17.281828790 s


19000x19000x19000	17.281829 s	793.781733 GFLOPS
Results saved to openblas_d.csv
19000, 19000, 19000, 17.403578, 788.228722

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(19000x19000) and matrix B(19000x19000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 17.403577936 s


19000x19000x19000	17.403578 s	788.228722 GFLOPS
Results saved to openblas_d.csv
19000, 19000, 19000, 17.284452, 793.661263

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(19000x19000) and matrix B(19000x19000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 17.284451992 s


19000x19000x19000	17.284452 s	793.661263 GFLOPS
Results saved to openblas_d.csv
19500, 19500, 19500, 18.614215, 796.689527

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(19500x19500) and matrix B(19500x19500)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 18.614214829 s


19500x19500x19500	18.614215 s	796.689527 GFLOPS
Results saved to openblas_d.csv
19500, 19500, 19500, 18.761633, 790.429611

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(19500x19500) and matrix B(19500x19500)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 18.761632656 s


19500x19500x19500	18.761633 s	790.429611 GFLOPS
Results saved to openblas_d.csv
19500, 19500, 19500, 18.611357, 796.811856

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(19500x19500) and matrix B(19500x19500)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 18.611357113 s


19500x19500x19500	18.611357 s	796.811856 GFLOPS
Results saved to openblas_d.csv
19500, 19500, 19500, 18.989233, 780.955711

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(19500x19500) and matrix B(19500x19500)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 18.989233054 s


19500x19500x19500	18.989233 s	780.955711 GFLOPS
Results saved to openblas_d.csv
19500, 19500, 19500, 19.083961, 777.079227

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(19500x19500) and matrix B(19500x19500)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 19.83961435 s


19500x19500x19500	19.083961 s	777.079227 GFLOPS
Results saved to openblas_d.csv
20000, 20000, 20000, 20.492714, 780.765310

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(20000x20000) and matrix B(20000x20000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 20.492713752 s


20000x20000x20000	20.492714 s	780.765310 GFLOPS
Results saved to openblas_d.csv
20000, 20000, 20000, 20.627294, 775.671295

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(20000x20000) and matrix B(20000x20000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 20.627294181 s


20000x20000x20000	20.627294 s	775.671295 GFLOPS
Results saved to openblas_d.csv
20000, 20000, 20000, 20.491454, 780.813291

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(20000x20000) and matrix B(20000x20000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 20.491454456 s


20000x20000x20000	20.491454 s	780.813291 GFLOPS
Results saved to openblas_d.csv
20000, 20000, 20000, 20.562893, 778.100625

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(20000x20000) and matrix B(20000x20000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 20.562893138 s


20000x20000x20000	20.562893 s	778.100625 GFLOPS
Results saved to openblas_d.csv
20000, 20000, 20000, 20.502320, 780.399498

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(20000x20000) and matrix B(20000x20000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 20.502319695 s


20000x20000x20000	20.502320 s	780.399498 GFLOPS
Results saved to openblas_d.csv
